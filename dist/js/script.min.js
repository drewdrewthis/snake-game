/*
 snake-game 2016-04-03 
*/
var highscores={},snakegame=angular.module("snakegame",["backand"]).config(function(a){a.setAppName("snakegame"),a.setSignUpToken("f2b442ed-11a5-4ac0-90d8-5b15a7b746c6"),a.setAnonymousToken("e8fe4247-b670-48a4-9caa-4fa99f9820ab")}).run(function(a,b){var c=this;c.getList=function(c,d,e){return c="highscores",a({method:"GET",url:b.getApiUrl()+"/1/objects/"+c,params:{pageSize:20,pageNumber:1,filter:e||"",sort:d||""}}).then(function(a){var b=a.data.data;console.log("Got data"),b.sort(function(a,b){return a.score<b.score}),console.log(b),$("#leaderboard ol").text(""),b.forEach(function(a){$("#leaderboard ol").append("<li>"+a.user+" "+a.score+"</li>")})})},c.updateList=function(d,e){var f="highscores",g=new Date;return g=g.toISOString(),a({method:"POST",url:b.getApiUrl()+"/1/objects/"+f,data:{user:d,score:e,created:g}}).then(function(){c.getList()})},$("#postform").submit(function(a){a.preventDefault();var b=$('#postform input[name="name"]').val();$('#postform input[name="score"]').val();console.log("submit"+b),console.log(model.game.score),c.updateList(b,model.game.score),$("#postform").trigger("reset").hide(),$(".closebtn").show()}),c.getList()}),model={init:function(){var a={array:[[~~(model.game.options.dimension/2)-3,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2)-2,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2)-1,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2),~~(model.game.options.dimension/2)]],direction:"right",hasFlip:!0};a.head=a.array.length-1,a.prev_direction=a.direction,model.snake=a,model.game.score=0},game:{score:0,isPaused:!0,options:{speed:100,dimension:15,theme:"theme1"},directions:["right","left","up","down"]},frogTOs:[]},view={init:function(){var a=controller.getBoardDimension(),b=controller.getSnake();view.assignKeyControls(),view.setupBoard(a,b),view.mobileControls(),view.userOptions(),controller.makeFrog()},userOptions:function(){var a=!1;$("#options-form-submit").on("click",function(b){$("#options-form input:checked").each(function(){"dimension"==this.name&&this.value!=model.game.options.dimension&&(a=!0),model.game.options[this.name]=this.value}),a&&controller.game.reset(),console.log("Resetting game with new Options.."),console.log(model.game.options),b.preventDefault()})},setupBoard:function(a,b){$(".board").html("");var c=$(".board").width();$(".board").css("height",c),$(".score").text(model.game.score),$(".highscore").text(localStorage.highscore),$(".close, .closebtn").click(function(){$(".modal").hide(),controller.game.reset(),$("#postform").show(),$(".closebtn").hide()}),window.addEventListener("resize",function(){$(".board").css("height",$(".board").width())},!1);for(var d=0;a>d;d++)for(var e=0;a>e;e++)$(".board").append('<div class="quadrant" data-xcoord="'+e+'" data-ycoord="'+d+'"></div>');$(".quadrant").css({width:c/a/c*100+"%",height:c/a/c*100+"%"}),view.quad(b.array[b.head]).addClass("snake snake-head").addClass(b.direction),view.quad(b.array[b.head-1]).addClass("snake snake-body-1 flip").addClass(b.direction),view.quad(b.array[b.head-2]).addClass("snake snake-body-main flip").addClass(b.direction),view.quad(b.array[0]).addClass("snake snake-tail flip").addClass(b.direction)},quad:function(a){return $("[data-xcoord="+a[0]+"][data-ycoord="+a[1]+"]")},assignKeyControls:function(){$(document).keydown(function(a){switch(a.which){case 37:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.left(model.snake),$("#left").addClass("pressed");break;case 38:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.up(model.snake),$("#up").addClass("pressed");break;case 39:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.right(model.snake),$("#right").addClass("pressed");break;case 40:model.game.isPaused&&(controller.game.pause(),isPaused=!1),controller.moveSnake.down(model.snake),$("#down").addClass("pressed");break;case 27:case 32:controller.game.pause(model.snake);break;default:return}a.preventDefault()}),$(document).keyup(function(a){switch(a.which){case 37:$("#left").removeClass("pressed");break;case 38:$("#up").removeClass("pressed");break;case 39:$("#right").removeClass("pressed");break;case 40:$("#down").removeClass("pressed");break;default:return}a.preventDefault()})},mobileControls:function(){$("#start_stop").on("tap",function(){return"Pause"==$(this).text()?void controller.game.pause(model.snake):"Resume"==$(this).text()?void controller.game.pause(model.snake):"Start"==$(this).text()?($(this).text("Pause"),isPaused=!1,void controller.moveSnake.go(model.snake)):void 0}),$("#reset").on("tap",function(){$("#start_stop").text("Start"),controller.game.reset()}),$("#more_frogs").on("tap",function(){controller.makeFrog()}),$("#left").on("tap",function(){controller.moveSnake.left(model.snake)}),$("#up").on("tap",function(){controller.moveSnake.up(model.snake)}),$("#right").on("tap",function(){controller.moveSnake.right(model.snake)}),$("#down").on("tap",function(){controller.moveSnake.down(model.snake)})}},controller={init:function(){console.log("Initializing game.."),model.init(),localStorage.highscore||(localStorage.highscore=0),view.init()},getBoardDimension:function(){return model.game.options.dimension},getSnake:function(){return model.snake},setHighScore:function(){localStorage.highscore<model.game.score&&(localStorage.highscore=model.game.score,$(".highscore").text(localStorage.highscore)),$("#highscoreModal").show()},game:{pause:function(a){model.game.isPaused?(controller.moveSnake.go(a),$("#start_stop").text("Pause"),model.game.isPaused=!1):(model.game.isPaused=!0,$("#start_stop").html("Resume"))},isOver:function(a){return view.quad(a).hasClass("snake")?(console.log("Over! Bit its tail! "+a),controller.setHighScore(),!0):a[0]>=model.game.options.dimension||a[1]>=model.game.options.dimension||a[0]<0||a[1]<0?(console.log("Over! Crashed into the wall! "+a),controller.setHighScore(),!0):!1},reset:function(){controller.cancelHops(),model.init(),view.setupBoard(model.game.options.dimension,model.snake),$("frog").removeClass().addClass("quadrant"),controller.makeFrog()}},growSnake:function(a,b){b.array.push(a),b.head=b.array.length-1},moveSnake:{up:function(a){"down"!=a.direction&&(a.prev_direction=a.direction,a.direction="up")},down:function(a){"up"!=a.direction&&(a.prev_direction=a.direction,a.direction="down")},left:function(a){"right"!=a.direction&&(a.prev_direction=a.direction,a.direction="left")},right:function(a){"left"!=a.direction&&(a.prev_direction=a.direction,a.direction="right")},go:function(a){var b=a.array[a.head][0],c=a.array[a.head][1],d=[b,c];switch(a.direction){case"left":d[0]--;break;case"up":d[1]--;break;case"right":d[0]++;break;case"down":d[1]++}var e=setTimeout(function(){if(controller.game.isOver(d))clearTimeout(e);else{if(controller.isFrog(d))view.quad(d).removeClass("frog"),controller.makeFrog(),controller.growSnake(d,a);else{view.quad(a.array[0]).removeClass().addClass("quadrant");for(var b=0;b<a.array.length-1;b++)a.array[b]=a.array[b+1];a.array[a.head]=d}view.quad(a.array[a.head]).removeClass().addClass("quadrant snake snake-head").addClass(a.direction),a.prev_direction!=a.direction&&(view.quad(a.array[a.head]).removeClass().addClass("quadrant snake snake-head-2").addClass(a.direction),controller.makeCorner(a.array[a.head])),a.hasFlip&&view.quad(a.array[a.head],a.array[a.head-1],a.array[a.head-2],a.array[0]).toggleClass("flip"),view.quad(a.array[a.head-1]).hasClass("snake-corner")?(view.quad(a.array[a.head]).addClass("alternate-head"),view.quad(a.array[a.head-1]).removeClass("snake-head, snake-head-2")):view.quad(a.array[a.head-1]).addClass("snake snake-body-1").removeClass("snake-head-2, snake-head"),view.quad(a.array[a.head-2]).hasClass("snake-corner")?view.quad(a.array[a.head-1]).removeClass("alternate-head"):view.quad(a.array[a.head-2]).addClass("snake snake-body-main").removeClass("snake-body-1").toggleClass("flip"),view.quad(a.array[0]).hasClass("snake-corner")?view.quad(a.array[0]).addClass("snake snake-tail").removeClass("snake-body-main snake-corner"):view.quad(a.array[0]).addClass("snake snake-tail").removeClass("snake-body-main snake-corner").toggleClass("flip"),a.hasFlip=!a.hasFlip,model.game.isPaused||controller.moveSnake.go(a)}},model.game.options.speed)}},makeCorner:function(a,b){view.quad(a).addClass("snake-corner"),("up"==model.snake.prev_direction&&"right"==model.snake.direction||"left"==model.snake.prev_direction&&"down"==model.snake.direction)&&view.quad(a).addClass("right-corner"),("up"==model.snake.prev_direction&&"left"==model.snake.direction||"right"==model.snake.prev_direction&&"down"==model.snake.direction)&&view.quad(a).addClass("left-corner"),("down"==model.snake.prev_direction&&"right"==model.snake.direction||"left"==model.snake.prev_direction&&"up"==model.snake.direction)&&view.quad(a).addClass("down-right-corner"),("down"==model.snake.prev_direction&&"left"==model.snake.direction||"right"==model.snake.prev_direction&&"up"==model.snake.direction)&&view.quad(a).addClass("down-left-corner"),model.snake.prev_direction=model.snake.direction},isFrog:function(a){return view.quad(a).hasClass("frog")?(model.game.score++,$(".score").text(model.game.score),!0):!1},makeFrog:function(){var a=model.game.options.dimension,b=model.game.directions,c=null;x=Math.floor(Math.random()*(a-1-0))+1,y=Math.floor(Math.random()*(a-1-0))+1,view.quad([x,y]).hasClass("snake")?controller.makeFrog():(c=view.quad([x,y]),c.addClass("frog").addClass(b[Math.floor(Math.random()*b.length)])),controller.delayHop(c,2e3),console.log("New Frog: "+x+","+y)},frogHop:function(a){var b=a.data("xcoord"),c=a.data("ycoord"),d=[b,c],e=null;switch(model.game.directions.forEach(function(b){a.hasClass(b)&&(e=b)}),e){case"up":d[1]-=2;break;case"down":d[1]+=2;break;case"left":d[0]-=2;break;case"right":d[0]+=2;break;default:console.log("froghop failed: "+d)}a.removeClass("frog"),a=view.quad(d),!a.hasClass("snake")&&a.hasClass("quadrant")?(a.addClass(e+" frog"),controller.delayHop(a,2e3)):(console.log("Stopped hop"),$(".frog").length<1&&controller.makeFrog())},delayHop:function(a,b){model.frogTOs.push(setTimeout(function(){controller.frogHop(a)},b))},cancelHops:function(){for(var a=0;a<model.frogTOs.length;a++)clearTimeout(model.frogTOs[a]);model.frogTOs=[]}};$(document).ready(function(){controller.init()});