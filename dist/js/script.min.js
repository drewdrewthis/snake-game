/*
 snake-game 2016-04-05 
*/
var model={init:function(){var snake={array:[[~~(model.game.options.dimension/2)-3,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2)-2,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2)-1,~~(model.game.options.dimension/2)],[~~(model.game.options.dimension/2),~~(model.game.options.dimension/2)]],direction:"right",hasFlip:!0};snake.head=snake.array.length-1,snake.prev_direction=snake.direction,model.snake=snake,model.game.score=0},game:{score:0,isPaused:!0,options:{speed:100,dimension:15,theme:"theme1"},directions:["right","left","up","down"]},frogTOs:[]},view={init:function(){var dimension=controller.getBoardDimension(),snake=controller.getSnake();view.assignKeyControls(),view.setupBoard(dimension,snake),view.mobileControls(),view.userOptions(),controller.makeFrog()},userOptions:function(){var needsReset=!1;$("#options-form-submit").on("click",function(event){$("#options-form input:checked").each(function(){"dimension"==this.name&&this.value!=model.game.options.dimension&&(needsReset=!0),model.game.options[this.name]=this.value}),needsReset&&controller.game.reset(),console.log("Resetting game with new Options.."),console.log(model.game.options),event.preventDefault()})},setupBoard:function(dimension,snake){$(".board").html("");var boardW=$(".board").width();$(".board").css("height",boardW),$(".score").text(model.game.score),$(".highscore").text(localStorage.highscore),$(".close, .closebtn").click(function(){$(".modal").hide(),controller.game.reset(),$("#postform").show(),$(".closebtn").hide()}),window.addEventListener("resize",function(){$(".board").css("height",$(".board").width())},!1);for(var y=0;dimension>y;y++)for(var x=0;dimension>x;x++)$(".board").append('<div class="quadrant" data-xcoord="'+x+'" data-ycoord="'+y+'"></div>');$(".quadrant").css({width:boardW/dimension/boardW*100+"%",height:boardW/dimension/boardW*100+"%"}),view.quad(snake.array[snake.head]).addClass("snake snake-head").addClass(snake.direction),view.quad(snake.array[snake.head-1]).addClass("snake snake-body-1 flip").addClass(snake.direction),view.quad(snake.array[snake.head-2]).addClass("snake snake-body-main flip").addClass(snake.direction),view.quad(snake.array[0]).addClass("snake snake-tail flip").addClass(snake.direction)},quad:function(coord){return $("[data-xcoord="+coord[0]+"][data-ycoord="+coord[1]+"]")},assignKeyControls:function(){$(document).keydown(function(e){switch(e.which){case 37:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.left(model.snake),$("#left").addClass("pressed");break;case 38:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.up(model.snake),$("#up").addClass("pressed");break;case 39:model.game.isPaused&&(controller.game.pause(model.snake),isPaused=!1),controller.moveSnake.right(model.snake),$("#right").addClass("pressed");break;case 40:model.game.isPaused&&(controller.game.pause(),isPaused=!1),controller.moveSnake.down(model.snake),$("#down").addClass("pressed");break;case 27:$(".modal").hide();break;case 32:controller.game.pause(model.snake);break;default:return}e.preventDefault()}),$(document).keyup(function(e){switch(e.which){case 37:$("#left").removeClass("pressed");break;case 38:$("#up").removeClass("pressed");break;case 39:$("#right").removeClass("pressed");break;case 40:$("#down").removeClass("pressed");break;default:return}e.preventDefault()})},mobileControls:function(){$("#start_stop").on("tap",function(){return"Pause"==$(this).text()?void controller.game.pause(model.snake):"Resume"==$(this).text()?void controller.game.pause(model.snake):"Start"==$(this).text()?($(this).text("Pause"),isPaused=!1,void controller.moveSnake.go(model.snake)):void 0}),$("#reset").on("tap",function(){$("#start_stop").text("Start"),controller.game.reset()}),$("#more_frogs").on("tap",function(){controller.makeFrog()}),$("#left").on("tap",function(){controller.moveSnake.left(model.snake)}),$("#up").on("tap",function(){controller.moveSnake.up(model.snake)}),$("#right").on("tap",function(){controller.moveSnake.right(model.snake)}),$("#down").on("tap",function(){controller.moveSnake.down(model.snake)})}},controller={init:function(){console.log("Initializing game.."),model.init(),localStorage.highscore||(localStorage.highscore=0),view.init()},getBoardDimension:function(){return model.game.options.dimension},getSnake:function(){return model.snake},setHighScore:function(){localStorage.highscore<model.game.score&&(localStorage.highscore=model.game.score,$(".highscore").text(localStorage.highscore)),$("#highscoreModal").show()},game:{pause:function(snake){model.game.isPaused?(controller.moveSnake.go(snake),$("#start_stop").text("Pause"),model.game.isPaused=!1):(model.game.isPaused=!0,$("#start_stop").html("Resume"))},isOver:function(coord){return view.quad(coord).hasClass("snake")?(console.log("Over! Bit its tail! "+coord),controller.setHighScore(),!0):coord[0]>=model.game.options.dimension||coord[1]>=model.game.options.dimension||coord[0]<0||coord[1]<0?(console.log("Over! Crashed into the wall! "+coord),controller.setHighScore(),!0):!1},reset:function(){controller.cancelHops(),model.init(),view.setupBoard(model.game.options.dimension,model.snake),$("frog").removeClass().addClass("quadrant"),controller.makeFrog()}},growSnake:function(new_pos,snake){snake.array.push(new_pos),snake.head=snake.array.length-1},moveSnake:{up:function(snake){"down"!=snake.direction&&(snake.prev_direction=snake.direction,snake.direction="up")},down:function(snake){"up"!=snake.direction&&(snake.prev_direction=snake.direction,snake.direction="down")},left:function(snake){"right"!=snake.direction&&(snake.prev_direction=snake.direction,snake.direction="left")},right:function(snake){"left"!=snake.direction&&(snake.prev_direction=snake.direction,snake.direction="right")},go:function(snake){var x=snake.array[snake.head][0],y=snake.array[snake.head][1],new_pos=[x,y];switch(snake.direction){case"left":new_pos[0]--;break;case"up":new_pos[1]--;break;case"right":new_pos[0]++;break;case"down":new_pos[1]++}var progress_loop=setTimeout(function(){if(controller.game.isOver(new_pos))clearTimeout(progress_loop);else{if(controller.isFrog(new_pos))view.quad(new_pos).removeClass("frog"),controller.makeFrog(),controller.growSnake(new_pos,snake);else{view.quad(snake.array[0]).removeClass().addClass("quadrant");for(var i=0;i<snake.array.length-1;i++)snake.array[i]=snake.array[i+1];snake.array[snake.head]=new_pos}view.quad(snake.array[snake.head]).removeClass().addClass("quadrant snake snake-head").addClass(snake.direction),snake.prev_direction!=snake.direction&&(view.quad(snake.array[snake.head]).removeClass().addClass("quadrant snake snake-head-2").addClass(snake.direction),controller.makeCorner(snake.array[snake.head])),snake.hasFlip&&view.quad(snake.array[snake.head],snake.array[snake.head-1],snake.array[snake.head-2],snake.array[0]).toggleClass("flip"),view.quad(snake.array[snake.head-1]).hasClass("snake-corner")?(view.quad(snake.array[snake.head]).addClass("alternate-head"),view.quad(snake.array[snake.head-1]).removeClass("snake-head, snake-head-2")):view.quad(snake.array[snake.head-1]).addClass("snake snake-body-1").removeClass("snake-head-2, snake-head"),view.quad(snake.array[snake.head-2]).hasClass("snake-corner")?view.quad(snake.array[snake.head-1]).removeClass("alternate-head"):view.quad(snake.array[snake.head-2]).addClass("snake snake-body-main").removeClass("snake-body-1").toggleClass("flip"),view.quad(snake.array[0]).hasClass("snake-corner")?view.quad(snake.array[0]).addClass("snake snake-tail").removeClass("snake-body-main snake-corner"):view.quad(snake.array[0]).addClass("snake snake-tail").removeClass("snake-body-main snake-corner").toggleClass("flip"),snake.hasFlip=!snake.hasFlip,model.game.isPaused||controller.moveSnake.go(snake)}},model.game.options.speed)}},makeCorner:function(coords,snake){view.quad(coords).addClass("snake-corner"),("up"==model.snake.prev_direction&&"right"==model.snake.direction||"left"==model.snake.prev_direction&&"down"==model.snake.direction)&&view.quad(coords).addClass("right-corner"),("up"==model.snake.prev_direction&&"left"==model.snake.direction||"right"==model.snake.prev_direction&&"down"==model.snake.direction)&&view.quad(coords).addClass("left-corner"),("down"==model.snake.prev_direction&&"right"==model.snake.direction||"left"==model.snake.prev_direction&&"up"==model.snake.direction)&&view.quad(coords).addClass("down-right-corner"),("down"==model.snake.prev_direction&&"left"==model.snake.direction||"right"==model.snake.prev_direction&&"up"==model.snake.direction)&&view.quad(coords).addClass("down-left-corner"),model.snake.prev_direction=model.snake.direction},isFrog:function(coord){return view.quad(coord).hasClass("frog")?(model.game.score++,$(".score").text(model.game.score),!0):!1},makeFrog:function(){var dimension=model.game.options.dimension,directions=model.game.directions,frog=null;x=Math.floor(Math.random()*(dimension-1-0))+1,y=Math.floor(Math.random()*(dimension-1-0))+1,view.quad([x,y]).hasClass("snake")?controller.makeFrog():(frog=view.quad([x,y]),frog.addClass("frog").addClass(directions[Math.floor(Math.random()*directions.length)])),controller.delayHop(frog,2e3),console.log("New Frog: "+x+","+y)},frogHop:function(frog){var x=frog.data("xcoord"),y=frog.data("ycoord"),new_pos=[x,y],direction=null;switch(model.game.directions.forEach(function(dir){frog.hasClass(dir)&&(direction=dir)}),direction){case"up":new_pos[1]-=2;break;case"down":new_pos[1]+=2;break;case"left":new_pos[0]-=2;break;case"right":new_pos[0]+=2;break;default:console.log("froghop failed: "+new_pos)}frog.removeClass("frog"),frog=view.quad(new_pos),!frog.hasClass("snake")&&frog.hasClass("quadrant")?(frog.addClass(direction+" frog"),controller.delayHop(frog,2e3)):(console.log("Stopped hop"),$(".frog").length<1&&controller.makeFrog())},delayHop:function(frog,time){model.frogTOs.push(setTimeout(function(){controller.frogHop(frog)},time))},cancelHops:function(){for(var i=0;i<model.frogTOs.length;i++)clearTimeout(model.frogTOs[i]);model.frogTOs=[]}};$(document).ready(function(){controller.init();var audio=new Audio("audio/looperman-l-1319133-0091455-fanto8bc-stress-maximum.mp3");audio.loop=!0});